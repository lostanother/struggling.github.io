<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未来哲♂学研究所</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.lostanother.fun/"/>
  <updated>2018-04-14T02:19:02.745Z</updated>
  <id>https://blog.lostanother.fun/</id>
  
  <author>
    <name>another</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K线入门笔记</title>
    <link href="https://blog.lostanother.fun/2018/04/13/learning-of-Candlestick-Charts/"/>
    <id>https://blog.lostanother.fun/2018/04/13/learning-of-Candlestick-Charts/</id>
    <published>2018-04-13T09:54:50.000Z</published>
    <updated>2018-04-14T02:19:02.745Z</updated>
    
    <content type="html"><![CDATA[<p>即使被庄家收割是韭菜无可逃避的的命运，我们也要做一棵有上进心的韭菜。去年12月中旬接盘两万的比特币一直拖到现在，三万本金只剩三千不到，终于忍不住得开始学习投资相关的知识了。
这篇是网课<a href="http://study.163.com/course/introduction.htm?courseId=1003597016" target="_blank" rel="external">《K线入门》</a>的学习笔记</p>
<hr>
<h2 id="什么是K线"><a href="#什么是K线" class="headerlink" title="什么是K线"></a>什么是K线</h2><p>英文：Candles Chart，又名蜡烛图。日本德川幕府时期米商发明。</p>
<p><img src="K.PNG" alt="K线的组成"></p>
<p>影线表明多空搏斗的迹象，实体大小表明市场力量。</p>
<h2 id="单根k线形态"><a href="#单根k线形态" class="headerlink" title="单根k线形态"></a>单根k线形态</h2><p>分类：</p>
<ul>
<li>大K线：变动在百分之七以上</li>
<li>中K线：幅度在百分之三到百分之七之间</li>
<li>小K线：幅度在百分之一到百分之三之间</li>
</ul>
<p><strong>大阳线</strong>，可能盘整末期加速上涨，跌势末期跌势可能减弱甚至反转，涨势末期有见顶回落的风险</p>
<p><strong>大阴线</strong>，表明有下跌倾向。</p>
<ul>
<li>大幅上涨后出现大阴线，如果对应成交量有所放大，表明主力有出货倾向，卖出为宜。</li>
<li>横向盘整状态，出现大阴线，印证盘久必跌</li>
<li>刚开始下跌出现大阴线，对跌势起到确认的作用，建议投资者应当清仓退出</li>
<li>较大跌幅或连续下跌后出现大阴线，暗示做空能量已接近力竭，建议做好买进准备。</li>
</ul>
<p><em>注意：K线图的用处主要是显示市场情绪，释放信号，并不意味着行情立马反转</em></p>
<p><img src="star of ten.PNG" alt="十字星"></p>
<p><strong>十字星</strong>，上下影线很长，没有实体或者实体很小</p>
<ul>
<li>上升与下跌阶段出现十字星，并未改变趋势，只是起到中继作用。</li>
<li>上升或下跌末期，代表反转变盘的</li>
</ul>
<p><img src="harmer.PNG" alt="锤子线"></p>
<p><strong>锤子线</strong>，实体很短，下影线长于实体两倍以上，没有上影线或者上影线很短，可阴可阳。主要出现在整体价格的底部，代表买入信号。</p>
<p><img src="hang.PNG" alt="上吊线"></p>
<p><strong>上吊线</strong>，与锤子线对应，当出现在顶部且交易量放大时，是卖出的信号。</p>
<h2 id="倒转锤头与射击之星"><a href="#倒转锤头与射击之星" class="headerlink" title="倒转锤头与射击之星"></a>倒转锤头与射击之星</h2><p><img src="turned_harmer.PNG" alt="倒转锤头"></p>
<p><strong>倒转锤头</strong>，倒转的锤子线，出现在下跌趋势中，通常已有较大跌幅，或出现在阶段性地位。</p>
<p>应用情况：虽然阳线倒转锤头比阴线更看涨，但两者区别并不太大。一般来说，上影线越长实体越小，下跌时间越长幅度越大，倒转锤头的止跌更明显，反转的可能也越大；同时应当注意，上影线说明上方的力量较大，因此在倒转锤后需要等待第二根阳线、最好是大阳线或者其他看涨信号进行确认。</p>
<p><img src="shoot.PNG" alt="射击之星"></p>
<p><strong>射击之星</strong>, k线实体很小，可阴可阳，上影线很长，通常是实体两倍以上，没有或有很短的下影线。经常出现在上升趋势中，同场已经有较大涨幅或者处于相对高位。。</p>
<p>代表含义：出现在上升趋势中是见顶信号，后市看跌。说明币价大幅上涨后多空双方争夺进入白热化，最终空方胜出取得主动权；特别是在高价区出现表明上升动力严重不足，特别是上影线很长且成交量巨大的话，说明下跌趋势无法阻挡。</p>
<p>应用：</p>
<ul>
<li>在日K中顶部见到射击之星，建议先减部分仓位，待次日币价收阴，形成其他看跌组合再离场；</li>
<li>阴线射击之星比阳线射击之星看跌信号更强烈，实体与影线比例越悬殊见顶信号越强烈；</li>
<li>若币价涨幅不大，且射击之星对应成交量没有有效放大，可能是主力诱空陷阱，可以结合次日行情再做判断。</li>
</ul>
<p><img src="T.PNG" alt="T字线"></p>
<p><strong>T字线</strong> 又名庄家线，开盘价，收盘价，最高价粘在一起，成为一字，但最低价有相当一段距离。</p>
<p>应用：</p>
<p>位置不同，技术含义也就不同。出现在币价有较大涨幅之后（或在上涨趋势末端）是见顶信号，应提高警惕落袋为安；出现在币价有较大跌幅后，即下跌末端，是见底信号；出现在币价上涨或者下跌过程中，是趋势延续的信号。T线下影线越长，力度越大，信号越可靠。</p>
<p><em>注意：识别T字线是在趋势中还是趋势末端的要点，一是上升幅度不大那么出现高位T字线可能性就小，而是T字线之后币价中心上移说明庄家利用T字线在洗盘；若下沉，则是庄家利用T字线在出货。</em></p>
<p><strong>倒T字线</strong> ，形态特征：就是倒T字线</p>
<p>应用：出现在高价区，又叫下跌转折线，是卖出信号；出现在下跌末期，是买入信号，特别是末期下跌三连阴后出现倒T字线，或二黑夹一红后出现倒T字线，如果第二天出现大阳线，组成早晨之星或身怀六甲，是一个非常好的切入点。上影线越长，力度越大，信号越可靠</p>
<h2 id="三法形态"><a href="#三法形态" class="headerlink" title="三法形态"></a>三法形态</h2><p><img src="three_law.PNG" alt="三法形态"></p>
<p>形态特征：</p>
<ol>
<li>在趋势中出现一根大K线或者中K线</li>
<li>出现若干根实体短小的K线，并且实体必须在第一根（包括影线）的高低点范围内。</li>
<li>出现一根与第一根同阴（下降）或者同阳（上升）的大K线，且开盘价和收盘价同时高于（同阳）或低于（同阴）第一根K线，全部吞没前三个根实体短小的K线。</li>
</ol>
<p>含义：趋势暂时中断，但反转力量太弱不足以改变趋势，是一个盘整期。盘整后之前的趋势仍将延续。</p>
<h2 id="清晨之星与黄昏之星"><a href="#清晨之星与黄昏之星" class="headerlink" title="清晨之星与黄昏之星"></a>清晨之星与黄昏之星</h2><p><img src="asa.PNG" alt="清晨之星"></p>
<p>形态特征：</p>
<ol>
<li>第一根K线是具有较大实体的阴线（最好是大阴线。下降趋势末期的大阴线可能是空方力竭的信号）</li>
<li>第二根K线是一根有下影线的小阳、小阴十字线，可带上下影线</li>
<li>第三根K线是一根阳线，它明显向上深入到第一天阴线的是体制内。</li>
</ol>
<p>三根都具有反转效果的组合一起出现在趋势末期，是较为强烈的反转信号。</p>
<p>注意：</p>
<ul>
<li>清晨之星也可以由多根K线组成，清晨双星、三星的K线组合与清晨之星意义基本相同</li>
<li>阳线实体深入阴线实体的部分越多，转势信号越强</li>
<li>第一根K线对应的成交量越小，第三根K线对应的成交量越大，其信号越可靠</li>
<li>清晨十字星的转势信号比一般的清晨之星强</li>
</ul>
<p>应用：</p>
<ul>
<li>清晨之星出现在下降趋势末端才具有看涨的意义。若跌幅不大，则信号可靠信也差。</li>
<li>若清晨之星出现后，次日价格向上跳空开盘或是在较高价位拉出一根放量阳线，则其转势向上的信号就越强。</li>
<li>清晨之星是次要的底部反转信号，一旦出现，等待次日验证信号就很重要。如果决定介入，清晨之星的最低价往往是很好的止损位，一旦跌破该价就应当及时止损出局。</li>
<li>应当结合均线系统进行分析，特别会大幅下跌后，均线系统中5日线有向上弯头迹象时，出现清晨之星则见底可靠性大大增强</li>
<li>如果中间的K线是螺旋桨，锤头线、倒锤头线等带有很长影线的K线，则见底信号更强</li>
</ul>
<p>黄昏之星与清晨之星形态、意义相反。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;即使被庄家收割是韭菜无可逃避的的命运，我们也要做一棵有上进心的韭菜。去年12月中旬接盘两万的比特币一直拖到现在，三万本金只剩三千不到，终于忍不住得开始学习投资相关的知识了。
这篇是网课&lt;a href=&quot;http://study.163.com/course/introduc
    
    </summary>
    
      <category term="韭菜之路" scheme="https://blog.lostanother.fun/categories/%E9%9F%AD%E8%8F%9C%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="笔记" scheme="https://blog.lostanother.fun/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="k线" scheme="https://blog.lostanother.fun/tags/k%E7%BA%BF/"/>
    
      <category term="投资理论" scheme="https://blog.lostanother.fun/tags/%E6%8A%95%E8%B5%84%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>悄悄地翻墙，打枪的不要！——搭建配备WebSocket+TLS+CDN的v2ray服务</title>
    <link href="https://blog.lostanother.fun/2018/04/10/Hide-your-v2ray-behind-a-normal-websit/"/>
    <id>https://blog.lostanother.fun/2018/04/10/Hide-your-v2ray-behind-a-normal-websit/</id>
    <published>2018-04-10T00:16:58.000Z</published>
    <updated>2018-04-13T02:41:00.224Z</updated>
    
    <content type="html"><![CDATA[<p>去年10月开始，国内就开始传言GFW已经掌握识别SS流量技术（详见《<a href="https://github.com/shadowsocks/shadowsocks/issues/988" target="_blank" rel="external">ss已经被特征识别了，请大家跑路</a>》），同时许多网友在网上报告自己搭建ss的vps被GFW认证。所幸的是，当时我的vps除了不知道什么原因失联一次，可以说是免于一劫。然而，今年开年党国对vps的屏蔽愈演愈烈（详见《<a href="https://doub.io/sxsx-12/" target="_blank" rel="external">关于最近(01月24日后) GFW 大规模封禁 代理服务器IP 的一些猜测
</a>》），终于在1月我vastitude才开通不久的ip173开头的vps被封，这家服务商买时说是能换机房，我在被墙当天提交了申请，申请完提示等待，一旦完成会发邮件告知，然而我却一直等到了除夕夜，我alpharack的7刀年付小鸡也惨遭毒手——一时间我居然又回到要仰仗赛风这类安全黑箱的地步！几天后在vastitude重新申请了一边并发工单、一边找网页客服聊天催促，才终于给我换好机房。我的翻墙之梯也才重新安定下来。alpharacks的机器也就挂了个H@H然后随他吃灰了</p>
<p>前些天在<a href="https://chunyao.org/3070#comment-2804" target="_blank" rel="external">《Alpharacks - 争议很大的一家IDC》</a>这篇博文的指引下发工单换了个ip，痛定思痛，为了降低二进宫的概率我决定要重新搭建一架钛合金梯子。现记下搭建的过程以备将来不时之需。</p>
<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ol>
<li>系统ubuntu 16.04的vps</li>
<li>一个指向vps的ip的域名</li>
</ol>
<h2 id="安装v2ray服务端"><a href="#安装v2ray服务端" class="headerlink" title="安装v2ray服务端"></a>安装v2ray服务端</h2><p>因为v2ray这个死傲娇要求服务端和本地的时间差少于两分钟。首先要输入<code>date -R</code>验证时间。注意输出结果最后的<code>-400</code>的含义是时区，即西五区。我的小鸡时间就是西五区，与东八区刚好相差12个小时。</p>
<p>下载并运行服务端安装脚本</p>
<pre><code>wget https://install.direct/go.sh
sudo bash go.sh
</code></pre><p>不出意外此时服务端已经安装完毕，可以输入命令</p>
<pre><code>sudo systemctl start v2ray
</code></pre><p>启动之，但目前还远不能用。</p>
<h2 id="配置TLS"><a href="#配置TLS" class="headerlink" title="配置TLS"></a>配置TLS</h2><p>acme.sh能够自动更新证书，但自动更新包括下文提到的重启apache或者nginx——视你使用哪个而定——都要求root权限，如果在普通账户下配置了自动更新的计划执行时可能出现权限不够的问题。因此最好切换到root账户下进行下列操作。</p>
<p>首先输入以下命令，acme.sh 会安装到 <code>~/.acme.sh</code> 目录下。</p>
<pre><code>curl  https://get.acme.sh | sh
</code></pre><p>执行以下命令生成证书：</p>
<pre><code>~/.acme.sh/acme.sh --issue -d 自己的域名 --standalone -k ec-256
</code></pre><p>这个命令会用到 80 端口，因此在执行之前要确保关掉了<code>apache</code>和<code>ngninx</code>之类会监听80端口的程序。为了保证将来acme。sh自动更新证书的顺利执行，我在<code>/etc/apache2/ports.conf</code>把apache默认监听的端口从80改到了443。</p>
<p>然后将证书导入到<code>/etc/v2ray</code>中</p>
<pre><code>~/.acme.sh/acme.sh --installcert -d blog.lostanother.fun --ecc\
           --keypath       /etc/v2ray/v2ray.key  \
           --fullchainpath /etc/v2ray/v2ray.crt \
           --reloadcmd     &quot;service apache2 force-reload&quot;
</code></pre><p>使用<code>installcert</code>参数执行的操作会被acme.sh记录下来，在下次证书更新时再次执行，避免证书申请下来了还要人工安装证书并载入Apache。
至此ssl证书就一劳永与地申请、安装完毕了。</p>
<h2 id="配置Apache转发v2ray流量"><a href="#配置Apache转发v2ray流量" class="headerlink" title="配置Apache转发v2ray流量"></a>配置Apache转发v2ray流量</h2><p>apache安装好后，开启以下模组</p>
<pre><code>sudo a2enmod ssl
sudo a2enmod proxy
sudo a2enmod proxy_wstunnel
sudo a2enmod proxy_http
sudo a2enmod rewrite
sudo a2enmod headers
</code></pre><p>编辑配置文件<code>/etc/apache2/000-default.conf</code></p>
<pre><code>&lt;VirtualHost *:443&gt;

    ServerName yourdomain.com.
    ServerAlias yourdomain.com.
    ##SSL Engine Switch:
    #Enable/Disable SSL for this virtual host.
    SSLEngine On

    RewriteEngine On
      RewriteCond %{HTTP:Upgrade} =websocket [NC]
     RewriteRule /(.*)           ws://localhost:3579/$1 [P,L]
    RewriteCond %{HTTP:Upgrade} !=websocket [NC]
    RewriteRule /(.*)           http://localhost:3579/$1 [P,L]


    ##Proxy to port 3579
    #Replace xxx.xxx.xxx.xxx with your servers IP adress or hostname
    #Replace yourCertname with your servers SSL certificate name
    SSLProxyEngine On
    Proxypass /ray http://127.0.0.1:3579   
    ProxyPassReverse /ray http://127.0.0.1:3579

    SSLCertificateFile /etc/v2ray/v2ray.crt
    SSLCertificateKeyFile /etc/v2ray/v2ray.key

&lt;/VirtualHost&gt;
</code></pre><p>以上配置来自<a href="https://dakai.github.io/2017/12/22/v2ray-websocket-tls-apache.html" target="_blank" rel="external">这篇博文</a>，我在使用后发现无法再使用443端口访问放在vps上的博客了。研究了一番apache的转发规则后发现这个配置中的转发规则是吧websocket和http流量都转发给了3579，也就是我们即将配置的v2ray监听的端口。既然我们选择用websocket流量连接v2ray，也就没必要转发http流量了，因此可以删掉</p>
<pre><code>RewriteCond %{HTTP:Upgrade} !=websocket [NC]
RewriteRule /(.*)           http://localhost:3579/$1 [P,L]
</code></pre><p>只转发代理流量，让正常的http流量正常进出，保证博客的正常浏览。</p>
<h2 id="v2ray服务端配置"><a href="#v2ray服务端配置" class="headerlink" title="v2ray服务端配置"></a>v2ray服务端配置</h2><p>打开<code>/etc/v2ray/config.json</code>，如下进行配置</p>
<pre><code>  {
&quot;log&quot; : {
  &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,
  &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,
  &quot;loglevel&quot;: &quot;warning&quot;
},
&quot;inbound&quot;: {
  &quot;port&quot;: 3579, //应于Apache转发流量的目标端口一致
  &quot;listen&quot;:&quot;127.0.0.1&quot;, //只监听本地端口，避免被外部主动嗅探
  &quot;protocol&quot;: &quot;vmess&quot;,
  &quot;settings&quot;: {
    &quot;clients&quot;: [
      {
        &quot;id&quot;: &quot;你的UUID&quot;, //UUID是类似密码一般的存在，不要随意编写，可在第三方客户端如v2rayN或在线（如UUIDgenerator.net）生成
        &quot;level&quot;: 1,
        &quot;alterId&quot;: 64
      }   
      ]
  },
  &quot;streamSettings&quot;:{
    &quot;network&quot;:&quot;ws&quot;,
    &quot;wsSettings&quot;:{
      &quot;path&quot;:&quot;/ray&quot; //与Apache配置中路径一致，可以且鼓励自定义该路径
      }
    }
  },
&quot;outbound&quot;: {
&quot;protocol&quot;: &quot;freedom&quot;,
&quot;settings&quot;: {}
},
&quot;outboundDetour&quot;: [
{
&quot;protocol&quot;: &quot;blackhole&quot;,
&quot;settings&quot;: {},
&quot;tag&quot;: &quot;blocked&quot;
  }
 ]
}
</code></pre><h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="CDN配置"></a>CDN配置</h2><p>这个就没什么好说的了，注册个cloudflare账号，将其作为DNS服务器，然后给想要保护的域名打开cdn开关就行。</p>
<p><img src="cdn.PNG" alt=""></p>
<h2 id="客户端配置-windows"><a href="#客户端配置-windows" class="headerlink" title="客户端配置(windows)"></a>客户端配置(windows)</h2><p><a href="cdn.PNGhttps://github.com/v2ray/v2ray-core/releases" target="_blank" rel="external">这里</a>下载v2ray客户端（其实和服务端是同一套程序），<a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="external">这里</a>下载第三方程序v2rayN。解压到同一个文件夹内，打开v2rayN，点击<code>服务器-添加[vmess]服务器</code></p>
<p>在弹出的配置窗口内如图填写</p>
<p><img src="v2rayN.PNG" alt=""></p>
<p><code>地址</code>处填写你的域名</p>
<p><code>用户ID</code>处填写你的UUID</p>
<p><code>别名</code>处你自己给这个v2ray服务起个名字</p>
<p><code>伪装域名</code>处填写上文Apache和v2ray中填写的路径。注意<code>/ray</code>和<code>/ray/</code>是不一样的`</p>
<p>不出意外的话，客户端至此就已经配置完成。点击确定，设置好浏览器代理就可以翻墙上网了</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://toutyrater.github.io/" target="_blank" rel="external">V2Ray 配置指南</a></li>
<li><a href="https://dakai.github.io/2017/12/22/v2ray-websocket-tls-apache.html" target="_blank" rel="external">在Apache服务器上实现tls Websocket转发v2ray代理
</a></li>
<li><a href="https://www.yiwan.pro/index.php/ltd_documents/363-using-acmesh-to-start-https.html" target="_blank" rel="external">﻿利用acme.sh启用https的一点记录</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年10月开始，国内就开始传言GFW已经掌握识别SS流量技术（详见《&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/issues/988&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ss已经被特征识
    
    </summary>
    
      <category term="软硬兼施" scheme="https://blog.lostanother.fun/categories/hard-software/"/>
    
    
      <category term="翻墙" scheme="https://blog.lostanother.fun/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="v2ray" scheme="https://blog.lostanother.fun/tags/v2ray/"/>
    
      <category term="apache2" scheme="https://blog.lostanother.fun/tags/apache2/"/>
    
      <category term="vps" scheme="https://blog.lostanother.fun/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>VPS部署hexo博客</title>
    <link href="https://blog.lostanother.fun/2017/07/19/notes-on-hexo-building/"/>
    <id>https://blog.lostanother.fun/2017/07/19/notes-on-hexo-building/</id>
    <published>2017-07-19T02:06:32.000Z</published>
    <updated>2018-04-13T02:24:01.636Z</updated>
    
    <content type="html"><![CDATA[<p>一年多前跟着A岛一名热心的肥宅买了现在这个VPS之后，每个月500G的流量都最多用掉2G而已，这个月偶然听说openvz虚拟技术能用谷人希的新加速技术bbr。用上后网速好很多，于是不光网页浏览，bt、pt下载点对点连接全走代理。然而这样也才用到40多G而已。</p>
<img src="/2017/07/19/notes-on-hexo-building/bandwidth.png" alt="This is an example image" title="This is an example image">
<p>或许是天意，不知怎么的打起了建个博客的想法。</p>
<p>因为是256M的小内存机，在网上搜集相关信息后很自然就把目光锁定在轻量级的博客Hexo上。</p>
<p>主要参考的教程为博主<strong>Sun Rongyang</strong>这篇<a href="https://thoroughyoung.info/2017/05/26/hexo-build-blog-complete-guide/" title="https://thoroughyoung.info/2017/05/26/hexo-build-blog-complete-guide/" target="_blank" rel="external">Hexo 个人博客搭建完全教程</a>，包含了从vps和域名的购买到hexo站点的具体配置一条龙说明，非常适合我这种没什么基础的人理清思路。原文已经说明的就不再赘述，主要记下在这个过程中遇到的几个问题和解决方法。</p>
<h2 id="DNS服务器的替换"><a href="#DNS服务器的替换" class="headerlink" title="DNS服务器的替换"></a>DNS服务器的替换</h2><p>原教程中，sun选择的是godaddy的付费域名。我感觉没有那个花费的必要，就选择在freenom上申请免费域名。然而问题在于freenom的域名解析服务非常之坑爹，在控制面板上配置了填好服务器ip之后，过了24h+该域名也没正确解析到我的服务器，因此两天后，我决定把域名解析托管到godaddy。</p>
<p>先是注册、登陆账号，然后在选择菜单中的DNS-添加DNS主机</p>
<img src="/2017/07/19/notes-on-hexo-building/DNS-host-add.png" alt="This is an example image" title="This is an example image">
<p>在其中填入你在freenom注册到的域名</p>
<img src="/2017/07/19/notes-on-hexo-building/address-add.png" alt="填入域名" title="填入域名">
<p>然后再按照提示，回freenom用godaddy的DNS解析服务器替换原来的服务器地址</p>
<p>我转移后不到一个小时就能正确解析了。两个网站都有中文界面，整个过程不难。</p>
<h2 id="用acme-tiny申请ssl证书"><a href="#用acme-tiny申请ssl证书" class="headerlink" title="用acme-tiny申请ssl证书"></a>用acme-tiny申请ssl证书</h2><p>原教程中使用Let<code>s Encrypt来给网站申请https证书，然而实际操作中却提示内存不足，草草谷歌一下发现let</code>s encrypt官方工具还是挺吃内存的，不足240M空闲内存就无法使用。于是我只好另请高明了。机缘巧合下搜到了这篇<a href="https://foofish.net/https-free-for-lets-encrypt.html" title="https://foofish.net/https-free-for-lets-encrypt.html" target="_blank" rel="external">免费HTTPS证书Let`s Encrypt安装教程</a>。跟着申请并配置好了https证书。其中遇到的两个问题值得记下：</p>
<p>1.在教程第二步使用域名私钥创建CSR文件时，作者说</p>
<blockquote>
<p>执行这一步时，需要指定 openssl.cnf 文件，一般这个文件在你的 openssl 安装目录底下。</p>
</blockquote>
<p>然而并非如此，我甚至下载各个版本的openssl重新安装都没能在ssl目录下找到openssl.cnf。所幸，经过一番艰苦的搜索，看到<a href="http://www.cnblogs.com/f-ck-need-u/p/6091027.html" title="http://www.cnblogs.com/f-ck-need-u/p/6091027.html" target="_blank" rel="external">OpenSSL主配置文件openssl.cnf</a>，其中说到openssl.cnf的正确路径是“/etc/pki/tls/openssl.cnf”</p>
<p>2.在第五步修改Nginx配置文件时，作者在nginx.conf中添加的语句相比于sun教程中最大的不同在于多了一行</p>
<p><code>ssl on；</code></p>
<p>事实证明，添加了这一行语句后，如果按照sun教程中的方法，添加</p>
<pre><code>if ($scheme != https) {
    rewrite ^/(.*) https://$server_name/$1 permanent;
</code></pre><p>实现http向https跳转的话会出现400错误而跳转失败。删去<code>ssl on;</code>就没问题了。 </p>
<p>最后网站挂小绿锁成功，不过可惜这种方法申请的https证书在<a href="https://www.ssllabs.com" target="_blank" rel="external">https://www.ssllabs.com</a>的安全性评级中只有rank B，理由是</p>
<blockquote>
<p>This server`s certificate chain is incomplete</p>
</blockquote>
<p>谷歌得知原因是我们申请到的证书中没有包含中间签署者的凭证。什么意思我也不知道。详见<a href="https://www.peterdavehello.org/2015/10/build-an-a-plus-best-practice-https-web-server-via-nginx-chinese-version/" title="https://www.peterdavehello.org/2015/10/build-an-a-plus-best-practice-https-web-server-via-nginx-chinese-version/" target="_blank" rel="external">用 nginx 建置一個 A+ 等級的 https 網頁伺服器</a>中“Certificate(Authentication)的部分”小节</p>
<h2 id="使用Git-Hook自动部署Hexo到VPS"><a href="#使用Git-Hook自动部署Hexo到VPS" class="headerlink" title="使用Git Hook自动部署Hexo到VPS"></a>使用Git Hook自动部署Hexo到VPS</h2><p>sun同学的教程中虽然有介绍利用git hook更新vps的博客，但是deploy的配置并没有介绍非默认ssh端口时应当如何配置，且没有密钥自动登入vps更新的介绍，因此只好另谋生计，谷歌到这篇更为详尽的<a href="http://yanzai.me/hexo-git-deploy.html" title="http://yanzai.me/hexo-git-deploy.html" target="_blank" rel="external">Hexo的Git部署，一行命令部署到GitHub和自己的VPS</a>,并成功配置好git hook。相比sun 同学的教程。其中不同与多出的地方有：</p>
<ul>
<li><p>说明如何生成密钥从而实现本地免密ssh登陆VPS。<strong>重点</strong>注意</p>
<blockquote>
<p>如果出现不能登录的情况，可能是文件权限有问题，VPS 上做如下修改：</p>
<pre><code>chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
</code></pre><p>在 VPS 上/home/git/下的 .ssh 目录必须要在 git 用户下创建</p>
</blockquote>
</li>
<li><p>在VPS上的git仓库下配置的hook文件<code>post-receive</code>第一行比sun的教程最后多了一个<code>-l</code>，</p>
<pre><code>#!/bin/bash -l
</code></pre><p>若不添加我在本地生成好的静态页面虽然能上传到vps的临时文件夹<code>/temp/Hexo</code>，却无法部署到网页文件所在目录</p>
</li>
<li><p>由于之前为VPS的安全性考虑修改了默认的ssh端口，这就使得<code>repo</code>字段不能填入常见的<code>git@github.com:yanzai/yanzai.github.io.git</code>的格式，应改为</p>
<pre><code>ssh://git@106.186.33.133:&lt;your-port&gt;/~/hexo.git
</code></pre></li>
<li><p>出于安全性考虑，应当禁用<code>git</code>用户的shell登陆权限。通过修改<code>/etc/passwd</code>文件，将其中</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash
</code></pre><p>  修改为</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
</code></pre><p>  详见<a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">使用 Git Hook 自动部署 Hexo 到个人 VPS</a></p>
</li>
</ul>
<h2 id="Hexo的markdown渲染"><a href="#Hexo的markdown渲染" class="headerlink" title="Hexo的markdown渲染"></a>Hexo的markdown渲染</h2><p>在写本篇博文时遇到的问题，分级标题格式##在markdownpad2中正常渲染</p>
<img src="/2017/07/19/notes-on-hexo-building/md-error-1.png" alt="mdp" title="mdp">
<p>在hexo却无法识别</p>
<img src="/2017/07/19/notes-on-hexo-building/md-error-2.png" alt="hexo" title="hexo">
<p>谷歌后获知hexo的md语法是github标准的gfm，与原版略有差异。进一步查阅hexo的md语法发现分级标题标记后应当有个空格。添加空格后渲染正常。</p>
<p>一名网友说得对，MD方言太多……</p>
<h2 id="update-2017-7-20"><a href="#update-2017-7-20" class="headerlink" title="update 2017/7/20"></a>update 2017/7/20</h2><h3 id="报错“Cannot-find-module-‘C-Program-Files-Git-node-modules-hexo-cli-bin-hexo”解决办法"><a href="#报错“Cannot-find-module-‘C-Program-Files-Git-node-modules-hexo-cli-bin-hexo”解决办法" class="headerlink" title="报错“Cannot find module ‘C:\Program Files\Git\node_modules\hexo-cli\bin\hexo”解决办法"></a>报错“Cannot find module ‘C:\Program Files\Git\node_modules\hexo-cli\bin\hexo”解决办法</h3><p>今天在笔记本电脑上安装却遇到报错<code>Cannot find module ‘C:\Program Files\Git\node_modules\hexo-cli\bin\hexo</code></p>
<img src="/2017/07/19/notes-on-hexo-building/error-in-rebuild.png" alt="报错" title="报错">
<p>重装nodejs，重装git搞了半天都不行，在git bash中安装hexo提示成功但输入hexo相关的命令就报这些错误。在网上搜寻到的解决方法是找到这个文件夹：C:\Users\你的用户名\AppData\Roaming\npm\node_modules\hexo（也可能是hexo-cli，视你安装hexo时的命令而定），然后把这hexo下的node_modules复制到Git安装目录下就解决了。</p>
<p>参考资料：<a href="https://helloqingfeng.github.io/2017/02/25/hexo-rebuilding/" target="_blank" rel="external">重装系统后，Hexo博客如何重新部署恢复
</a></p>
<h2 id="update-2018-4-9"><a href="#update-2018-4-9" class="headerlink" title="update 2018/4/9"></a>update 2018/4/9</h2><blockquote>
<p>这个博客在去年七月份搭建好，发布了这一篇笔记后就一直吃灰，当时租的vps在今年1月过期，算是正式死亡。所幸源文件都在本地，现在为了在alpharacks的小鸡上<a href="Hide-your-v2ray-behind-a-normal-websit.md">搭建v2ray并隐藏在正常网站后面</a>，干脆拿出来擦擦灰继续用，顺手解决一些遗留问题。至于以后写不写，还是看缘分吧。</p>
</blockquote>
<h3 id="解决报错”ERROR-Plugin-load-failed-hexo-tag-asset-res”"><a href="#解决报错”ERROR-Plugin-load-failed-hexo-tag-asset-res”" class="headerlink" title="解决报错”ERROR Plugin load failed: hexo-tag-asset-res”"></a>解决报错”ERROR Plugin load failed: hexo-tag-asset-res”</h3><p>在重新部署好Hexo后发现，每次Generate都会有大段<code>ERROR Plugin load failed: hexo-tag-asset-res</code>开头的报错，虽然最后好像不影响静态文件的生成，但总看着这些报错总是不爽。谷歌之，在github的issues中找到了解决方法。原来这<code>hexo-tag-asset-res</code>是在hexo2中使用的插件，当时的hexo还不支持<code>asset</code>文件夹，在升级后hexo3.0中已经完成了它的历史使命应当急流勇退了，那么我们解决这个报错就只需要卸载之。在git bash中输入</p>
<pre><code>npm uninstall hexo-tag-asset-res
</code></pre><p>完成后，还你清爽的git bash界面</p>
<h3 id="解决报错”-DEP0061-DeprecationWarning-fs-SyncWriteStream-is-deprecated-”"><a href="#解决报错”-DEP0061-DeprecationWarning-fs-SyncWriteStream-is-deprecated-”" class="headerlink" title="解决报错”[DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.”"></a>解决报错”[DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.”</h3><p>上述插件错误解决后，又遇到个似乎不影响生成静态页面的报错(囧何苦呢)<code>(node:9148) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</code>。谷歌之，发现一个强迫症博主也遇到这个问题，并顺利解决并帮助其他人也解决了这个问题（天知道为什么我还会遇到）。赞美程序员！
根据他的说法</p>
<blockquote>
<p>从报错信息来看是因为fs.SyncWriteStream is deprecated，node.js从8.0开始已经弃用了fs.SyncWriteStream方法，所以是因为我们node_modules中某个插件调用了这个方法，通过查看Hexo作者GitHub对应的项目，在issue中看到有人提到这个问题，在hexo项目中其中有一个hexo-fs的插件调用了这个方法，所以需要更新hexo-fs插件，更新方法如下</p>
<pre><code>npm install hexo-fs --save
</code></pre></blockquote>
<p>问题解决。</p>
<h3 id="新建博文后同步打开编辑器"><a href="#新建博文后同步打开编辑器" class="headerlink" title="新建博文后同步打开编辑器"></a>新建博文后同步打开编辑器</h3><p>用hexo写东西很不方便的一点就是用<code>hexo n XXXX</code>新建文章后还要到<code>source/_post</code>下去找自己刚刚新建的文件。针对这个问题，Hexo的作者给出了使用脚本自动打开文件的解决办法。</p>
<ul>
<li>在hexo博客的根目录下创建<code>script</code>文件夹</li>
<li>在script文件夹下创建任意名字的<code>.js</code>脚本文件</li>
<li><p>打开文件，复制进代码</p>
<p>  var spawn = require(<code>child_process</code>).exec;
  // Hexo 2.x
  hexo.on(<code>new</code>, function(path){</p>
<pre><code>exec(`vi`, [path]);
</code></pre><p>  });</p>
<p>  // Hexo 3
  hexo.on(<code>new</code>, function(data){</p>
<pre><code>exec(`vi`, [data.path]);
</code></pre><p>  });</p>
</li>
</ul>
<p>不过很不幸的是我在电脑上失败了，看作者的编辑器是vi，大概是他的环境是linux，我等用windows的凡人继续搜索吧。而后在使用这篇<a href="https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html" target="_blank" rel="external">Hexo添加文章时自动打开编辑器</a>中的脚本</p>
<pre><code>var spawn = require(`child_process`).exec;

// Hexo 2.x 用户复制这段
  hexo.on(`new`, function(path){
  spawn(`start  &quot;markdown编辑器绝对路径.exe&quot; ` + path);
});

// Hexo 3 用户复制这段
  hexo.on(`new`, function(data){
  spawn(`start  &quot;markdown编辑器绝对路径.exe&quot; ` + data.path);
});
</code></pre><p>复制了绝对路径进去反而报错，随便填个“notepad++”却可以直接用关联的程序打开新建的文件了。暂时就这样吧</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ol>
<li><a href="https://github.com/hexojs/hexo/issues/1290" target="_blank" rel="external">Spurious errors? Does hexo-tag-asset-res work with 3.1.1?</a></li>
<li><a href="http://rangerzhou.top/2017/07/27/Hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/" target="_blank" rel="external">Hexo博客注意事项</a></li>
<li><a href="https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html" target="_blank" rel="external">Hexo添加文章时自动打开编辑器</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年多前跟着A岛一名热心的肥宅买了现在这个VPS之后，每个月500G的流量都最多用掉2G而已，这个月偶然听说openvz虚拟技术能用谷人希的新加速技术bbr。用上后网速好很多，于是不光网页浏览，bt、pt下载点对点连接全走代理。然而这样也才用到40多G而已。&lt;/p&gt;
&lt;im
    
    </summary>
    
      <category term="软硬兼施" scheme="https://blog.lostanother.fun/categories/hard-software/"/>
    
    
      <category term="vps" scheme="https://blog.lostanother.fun/tags/vps/"/>
    
      <category term="hexo" scheme="https://blog.lostanother.fun/tags/hexo/"/>
    
      <category term="git" scheme="https://blog.lostanother.fun/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>“亲历”烟花厂爆炸事件的感想</title>
    <link href="https://blog.lostanother.fun/2016/01/20/2016-01-20-%E2%80%9C%E4%BA%B2%E5%8E%86%E2%80%9D%E7%83%9F%E8%8A%B1%E5%8E%82%E7%88%86%E7%82%B8%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%84%9F%E6%83%B3-3/"/>
    <id>https://blog.lostanother.fun/2016/01/20/2016-01-20-“亲历”烟花厂爆炸事件的感想-3/</id>
    <published>2016-01-20T04:53:00.000Z</published>
    <updated>2018-04-13T02:26:54.997Z</updated>
    
    <content type="html"><![CDATA[<p>凌晨十二点多的时候突然外面响起轰隆声，门窗都不停晃动。当时还以为是传说中的冷空气突袭导致的大风，出门感受了下好像也不是多大的风便生奇怪但也未放在心上，继续上网了。过了没多久，弟弟回到家和他说起此事，他说“那不是烟花厂爆炸吗，我加的一个群里都在讨论这个”。“卧槽终于轮到我们了啊”仿佛是故作惊奇地我说出这话，然后寒暄几句就回房间了。</p>
<p>出乎意料是不假，但是细细品味当时的心情，却其实如死水一般并没有什么感情波动。一直到三点钟在贴吧、微博看各种讨论，我都是一个观察者，看着他们祈福、祝愿……天佑上饶，这几个字就算由我打出来也只是没有倾注感情的空壳而已。看哆啦A梦剧场版时最触动我的一句话就是静香的父亲在评价大雄时说的，他能够“为了别人的幸福而高兴，为别人的不幸而伤心”，我是多么羡慕这样能够与他人感同身受的能力。然而我的心就像被封闭于一个透明的果壳，搜刮心里所有的感受所找到的，最多不过是能够亲历一场大事件的卑鄙的激动心情，对爆炸区居民安危的关心，对烟花厂里是否有人加班，对周围居民如何索赔这些，这些对他人的考虑都只能在现在由冷漠的理性跟随“应当如此”的道德命令翻扒出来扔在脑中，至于关心是什么，我感受不到，更不要提为他们的不幸而伤心了。</p>
<p>为什么一个人竟然能够如此冷漠！</p>
<p>刚才用家乡名和爆炸为关键词谷歌一下，发现这几年除了烟花厂还有些煤矿的爆炸，而我却浑然不知，只是在学校醉生梦死，畜生一般。这会儿这个畜生大概又因为有题材写了一篇自作多情的博客而高兴了吧，真是无可救药的人渣啊。</p>
<img src="/2016/01/20/2016-01-20-“亲历”烟花厂爆炸事件的感想-3/5408823152489187271.jpg" alt="哥哥他...(咬牙)...是个人渣！" title="哥哥他...(咬牙)...是个人渣！">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;凌晨十二点多的时候突然外面响起轰隆声，门窗都不停晃动。当时还以为是传说中的冷空气突袭导致的大风，出门感受了下好像也不是多大的风便生奇怪但也未放在心上，继续上网了。过了没多久，弟弟回到家和他说起此事，他说“那不是烟花厂爆炸吗，我加的一个群里都在讨论这个”。“卧槽终于轮到我们了
    
    </summary>
    
      <category term="有病呻吟" scheme="https://blog.lostanother.fun/categories/essay/"/>
    
    
  </entry>
  
</feed>
